# -*- coding: utf-8 -*-
"""Algorithm Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18R-ghlvJ44h74xU0EeMtAA3dXII7qsCu
"""

import pandas as pd
import numpy as np

#set a function to get the data from 'ToyData.xlsx'
def get_data():
  Inter_Link=pd.read_excel('ToyData.xlsx',sheet_name='Inter-Datacenter Links',skipfooter=1,usecols=range(14))
  Job_Data=pd.read_excel('ToyData.xlsx',sheet_name='Job List',usecols=range(2,38),skipfooter=2)
  Execution_Time=pd.read_excel('ToyData.xlsx',sheet_name='Job List',usecols=[38],skipfooter=2)
  Job_Precedence=pd.read_excel('ToyData.xlsx',sheet_name='Job List',usecols=[40],skipfooter=2)
  Slot_Number=pd.read_excel('ToyData.xlsx',sheet_name='Data Center Details',usecols=[0,1],skipfooter=5)
  Data_Partition=pd.read_excel('ToyData.xlsx',sheet_name='Data Center Details',usecols=[3,4])
  return Inter_Link, Job_Data, Execution_Time, Job_Precedence, Slot_Number, Data_Partition

#set a function to get the mapping relationship between each job and task
def job_task_relationship():
  job=['A','B','C','D','E','F']     #a list for all the jobs
  task_in_job=[2,2,3,5,6,9]         #a list for how many tasks that each job has
  task=pd.read_excel('ToyData.xlsx',sheet_name='Job List',usecols=[1],skipfooter=2)  #read the data for all the tasks
  task_list=[]                                               
  for i in range(len(task)):
    task_list.append(task['Unnamed: 1'].iloc[i])                                     #put the data into a list
  job_list=[]
  for j,k in zip(job,task_in_job):
    job_list+=[j for i in range(k)]                                                  
  job_task_list=[]
  for i in zip(job_list,task_list):
    job_task_list+=[i]                    #each element of the list is a tuple i, i[1] denotes a task and i[0] denotes the corresponding job
  job_task_dict={}
  for i,j in job_task_list:                    #set the keys of a new dictionary, each key represents a job
    job_task_dict[i]=[]
  for i,j in job_task_list:
    job_task_dict[i]=job_task_dict[i]+[j]            #each key represents a job, the value is a list containing corresponding tasks
  return job,task_list,job_task_list, job_task_dict  #return a list for jobs, a list for tasks, a list for (job,task), a dictionary for job:task

def get_index(df,index):                        #a function to set the index of certain dataframe
  if type(index[0])==tuple:                     #the index can be a multi-layered index containing all the tasks and corresponding job
    df.index=pd.MultiIndex.from_tuples(index)  
  elif type(index[0])==str:                     #the index can be a single-layered index containing all the tasks
    df.index=index

Inter_Link, Job_Data, Execution_Time, Job_Precedence, Slot_Number, Data_Partition=get_data()

Job_List,Task_List,Job_Task_List, Job_Task_Dict=job_task_relationship()

Job_Data

get_index(Job_Data,Job_Task_List)

Job_Data

Execution_Time

get_index(Execution_Time, Task_List)

Execution_Time


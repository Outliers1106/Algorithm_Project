# -*- coding: utf-8 -*-
"""ReadSimulatedData.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IDeIEmwhG2q5NB3hYYmB_vdmL3q0ZbCh
"""

import pandas as pd
import numpy as np

def get_data():
  Inter_Link=pd.read_excel('SimulatedData.xlsx',sheet_name='Inter-Datacenter Links')
  Job_Data=pd.read_excel('SimulatedData.xlsx',sheet_name='Job List',usecols=range(2,845))
  Execution_Time=pd.read_excel('SimulatedData.xlsx',sheet_name='Job List',usecols=[845])
  Job_Precedence=pd.read_excel('SimulatedData.xlsx',sheet_name='Job List',usecols=[846])
  Slot_Number=pd.read_excel('SimulatedData.xlsx',sheet_name='Data Center Details',usecols=[0,1],skipfooter=76)
  Data_Partition=pd.read_excel('SimulatedData.xlsx',sheet_name='Data Center Details',usecols=[3,4])
  return Inter_Link, Job_Data, Execution_Time, Job_Precedence, Slot_Number, Data_Partition

def get_index(df,index):                        #a function to set the index of certain dataframe
  if type(index[0])==tuple:                     #the index can be a multi-layered index containing all the tasks and corresponding job
    df.index=pd.MultiIndex.from_tuples(index)  
  elif type(index[0])==str:                     #the index can be a single-layered index containing all the tasks
    df.index=index

def job_task_relationship():
  job_data=pd.read_excel('SimulatedData.xlsx',sheet_name='Job List',usecols=[0])
  job=[]
  for i in range(len(job_data)):
    if type(job_data.iloc[i,0])==str:
      job.append(job_data.iloc[i,0])  #a list for all the jobs   
  task_in_job=[2,2,3,5,6,9]         #a list for how many tasks that each job has
  task=pd.read_excel('SimulatedData.xlsx',sheet_name='Job List',usecols=[1])  #read the data for all the tasks
  task_list=[]                                               
  for i in range(len(task)):
    task_list.append(task['Unnamed: 1'].iloc[i])                                     #put the data into a list                                                 
  job_task_list=[]
  for i in task_list:
    job_task_list+=[(i[1],i)]                    #each element of the list is a tuple i, i[1] denotes a task and i[0] denotes the corresponding job
  job_task_dict={}
  for i,j in job_task_list:                    #set the keys of a new dictionary, each key represents a job
    job_task_dict[i]=[]
  for i,j in job_task_list:
    job_task_dict[i]=job_task_dict[i]+[j]            #each key represents a job, the value is a list containing corresponding tasks
  return job,task_list,job_task_list, job_task_dict  #return a list for jobs, a list for tasks, a list for (job,task), a dictionary for job:task

# Inter_Link, Job_Data, Execution_Time, Job_Precedence, Slot_Number, Data_Partition=get_data()
#
# Job,Task_List,Job_Task_List, Job_Task_Dict=job_task_relationship()
#
# get_index(Execution_Time,Task_List)

